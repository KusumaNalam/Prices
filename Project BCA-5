import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
prices=pd.read_csv("C:/Users/kusuma/Downloads/House prices.csv")
#data understanding
prices.head()
prices.info()
prices.size
prices.shape
prices.isnull()
prices.tail()
prices.dropna()
prices
k=prices['beds'].unique()
print(k)
prices=pd.read_csv("C:/Users/kusuma/Downloads/House prices.csv")
plt.figure(figsize=(10,6))
sns.histplot(prices['price'],kde=True)
plt.title('Ditribution of prices')
plt.xlabel('price')
plt.ylabel('frequency')
plt.show()
plt.figure(figsize=(10,6))
sns.boxplot(x='beds',y='price',data=prices)
plt.title('house prices by no.of bedrooms')
plt.xlabel('no.of bedrooms')
plt.ylabel('price')
plt.show()
plt.figure(figsize=(10,6))
sns.scatterplot(x='size',y='price',data=prices)
plt.title('house prices vs size of property')
plt.xlabel('size')
plt.ylabel('price')
plt.show()
#data preprocessing
prices.dropna(inplace=True)
prices.isnull().sum()
prices.columns
prices=prices.drop(['size_units','lot_size_units','zip_code'],axis=1)
#assigning x and y
x=prices.drop('price',axis=1)
y=prices.drop('price',axis=1)
#train test split
from sklearn.model_selection import train_test_split 
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=47)
features = ['beds', 'baths', 'size', 'lot_size', 'zip_code']
target = 'price'
print(prices.columns)
prices.columns = prices.columns.str.strip().str.lower()
print(prices.columns)
features = ['beds', 'baths', 'size', 'lot_size', 'zipcode']
features = ['beds', 'baths', 'size', 'lot_size']
prices = prices[features + [target]].dropna()
X = prices[features]
y = prices[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
lr = LinearRegression()
lr.fit(X_train_scaled, y_train)
y_pred_lr = lr.predict(X_test_scaled)
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
y_pred_dt = dt.predict(X_test)
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
def evaluate_model(y_true, y_pred, model_name):
    print(f"{model_name} Performance:")
    print(f"Mean Absolute Error (MAE): {mean_absolute_error(y_true, y_pred):.2f}")
    print(f"RÂ² Score: {r2_score(y_true, y_pred):.2f}")
    print("-" * 40)
evaluate_model(y_test, y_pred_lr, "Linear Regression")
evaluate_model(y_test, y_pred_dt, "Decision Tree")
evaluate_model(y_test, y_pred_rf, "Random Forest")
plt.scatter(y_test, y_pred_rf, alpha=0.5)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Prices (Random Forest)")
plt.show()

mse_dt = mean_squared_error(y_test, y_pred_dt)
r2_dt = r2_score(y_test, y_pred_dt)

print(f"Decision Tree MSE: {mse_dt}")
print(f"Decision Tree R^2 Score: {r2_dt}")

# Evaluate Random Forest model
mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)

print(f"Random Forest MSE: {mse_rf}")
print(f"Random Forest R^2 Score: {r2_rf}")

mae_dt = mean_absolute_error(y_test, y_pred_dt)
print(f"Decision Tree MAE: {mae_dt}")

# Evaluate Random Forest model
mae_rf = mean_absolute_error(y_test, y_pred_rf)
print(f"Random Forest MAE: {mae_rf}")
